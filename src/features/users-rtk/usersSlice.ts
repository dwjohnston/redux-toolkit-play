import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchUsers, User } from './UsersService';

export interface UsersState {
  users: Array<User>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: UsersState = {
  users: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const asyncFetchUsers = createAsyncThunk(
  'users/fetchUsers',
  fetchUsers
);



export const counterSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(asyncFetchUsers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(asyncFetchUsers.fulfilled, (state, action) => {
        state.status = 'idle';
        state.users = action.payload;
      });
  },
});


export const selectUsersStatus = (state: RootState) => {
  return {
    isLoading: state.users.status === "loading",
    users: state.users.users,
  }
}


export default counterSlice.reducer;
