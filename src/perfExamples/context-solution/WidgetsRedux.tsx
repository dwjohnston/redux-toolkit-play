import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { configureStore } from '@reduxjs/toolkit'
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'


type Widget = {
    id: string;
    value: number;
}


type WidgetsHooks = {
    widgets: Array<Widget>;
    getWidgetById: (id: string) => Widget;
    addWidget: (widget: Widget) => void;

}


export interface WidgetsState {
    widgets: Record<string, Widget>;
}

const initialState: WidgetsState = {
    widgets: {
        "one": {
            id: "one",
            value: 1,
        },
        "two": {
            id: "two",
            value: 1,
        },
        "three": {
            id: "three",
            value: 1,
        }
    }
};



export const widgetSlice = createSlice({
    name: 'widgets',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addWidget: (state, action: PayloadAction<Widget>) => {
            return {
                ...state,
                widgets: {
                    ...state.widgets,
                    [action.payload.id]: action.payload
                }
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.


});


// Use throughout your app instead of plain `useDispatch` and `useSelector`

// ...

export const store = configureStore({
    reducer: {
        widgets: widgetSlice.reducer,
    },
})


// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<typeof store.getState>
// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
export type AppDispatch = typeof store.dispatch

export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


const useGetSingle = (id: string) => useAppSelector((store) => {
    const widget = store.widgets.widgets[id];
    if (!widget) {
        throw new Error("No widget found")
    }

    return widget;
});

export const useWidgets = (): WidgetsHooks => {

    const dispatch = useAppDispatch();
    const getWidgetById = useGetSingle; // Am I going off the plantation with this? 

    const allWidgets = useAppSelector((store) => {
        return Object.values(store.widgets.widgets);
    })
    return {
        getWidgetById,
        widgets: allWidgets,
        addWidget: (widget) => {

            dispatch(widgetSlice.actions.addWidget(widget));
        }
    }
}